#!/usr/bin/env python3
"""
Sistema NPS Customizado - Para extrair e analisar abas D+1, D+30 e NPS Ruim
Autor: Claude Code
Data: 26/07/2025
"""

import sys
import os
from datetime import datetime
from analisador_nps_completo import AnalisadorNPSCompleto
from analisador_ia_simple import AnalisadorIACustomizado
from gerador_pdf import GeradorPDFCustomizado
from adaptador_dados import AdaptadorDados


def exibir_menu_customizado():
    """Exibe o menu do sistema customizado"""
    print("\nüéØ SISTEMA AN√ÅLISE MERCAD√ÉO DOS √ìCULOS")
    print("=" * 65)
    print("üìä Especializado em D+1 (Atendimento) | D+30 (Produto) | NPS Ruim")
    print("=" * 65)
    print("1. üìã Gerar Relat√≥rio Completo de P√≥s-venda")
    print("2. üîç Testar Extra√ß√£o de Abas Espec√≠ficas")
    print("3. üìÑ Instru√ß√µes de Configura√ß√£o")
    print("4. üîß Configurar Autentica√ß√£o")
    print("5. üö™ Sair")
    print("=" * 65)


def mostrar_instrucoes_customizadas():
    """Mostra instru√ß√µes espec√≠ficas para as abas"""
    print("\nüìã INSTRU√á√ïES PARA ABAS ESPEC√çFICAS")
    print("=" * 60)
    print("üéØ ABAS NECESS√ÅRIAS na planilha:")
    print()
    print("1. üìä ABA 'NPS D+1' (Avalia√ß√£o de Atendimento):")
    print("   Colunas: ID, Data, Nome Completo, Primeiro Nome,")
    print("   Telefone, Avalia√ß√£o, Coment√°rio, Vendedor, Loja, Abandono")
    print()
    print("2. üõçÔ∏è ABA 'NPS D+30' (Avalia√ß√£o de Produto):")
    print("   Colunas: Id Bot, Data, Nome Completo, Primeiro Nome,")
    print("   WhatsApp, Avalia√ß√£o, Coment√°rio, Vendedor, Loja, Abandono")
    print()
    print("3. ‚ö†Ô∏è ABA 'NPS Ruim' (Casos Cr√≠ticos):")
    print("   Colunas: Id Bot, Fonte, Data, Nome Completo, Primeiro Nome,")
    print("   Telefone, Avalia√ß√£o, Coment√°rio, Vendedor, Loja, Situa√ß√£o,")
    print("   Coment√°rio da Resolu√ß√£o, Data Resolu√ß√£o")
    print()
    print("üí° CONFIGURA√á√ÉO da planilha:")
    print("   - Deixe a planilha P√öBLICA no Google Sheets")
    print("   - OU configure autentica√ß√£o (op√ß√£o 4)")
    print("   - Certifique-se que as abas tenham os nomes EXATOS:")
    print("     'NPS D+1', 'NPS D+30', 'NPS Ruim'")
    print("   - Nomes aceitos (case insensitive):")
    print("     ‚Ä¢ NPS D+1, NPS d+1, nps d+1")
    print("     ‚Ä¢ NPS D+30, NPS d+30, nps d+30") 
    print("     ‚Ä¢ NPS Ruim, NPS ruim, nps ruim")
    print()
    input("Pressione Enter para voltar ao menu...")


def processar_relatorio_customizado():
    """Processa gera√ß√£o de relat√≥rio customizado"""
    print("\nüìä GERA√á√ÉO DE RELAT√ìRIO MERCAD√ÉO DOS √ìCULOS")
    print("=" * 65)
    
    try:
        # 1. Coleta informa√ß√µes
        print("\nüìã CONFIGURA√á√ÉO DO RELAT√ìRIO")
        print("-" * 40)
        
        nome_loja = input("Nome da unidade (ex: MDO Colombo): ").strip()
        if not nome_loja:
            nome_loja = "MDO"
        
        url = input("URL do Google Sheets: ").strip()
        if not url:
            print("‚ùå URL n√£o fornecida!")
            return False
        
        # 2. EXTRAIR DADOS COM NOVO SISTEMA INTELIGENTE
        print(f"\nüéØ PASSO 1: Extraindo dados com IA de '{nome_loja}'...")
        print("üîç Buscando abas automaticamente: D+1, D+30, NPS Ruim...")
        
        # Usa o novo analisador completo
        analisador_completo = AnalisadorNPSCompleto(nome_loja)
        
        # Extra√ß√£o autom√°tica das abas
        if not analisador_completo._extrair_abas_automaticamente(url):
            print("‚ùå Falha na conex√£o com a planilha!")
            print("üí° Verifique se:")
            print("   - A planilha est√° p√∫blica (compartilhamento aberto)")
            print("   - A URL est√° correta")
            print("   - Ou configure autentica√ß√£o (op√ß√£o 4 do menu)")
            return False
        
        # Padroniza dados
        analisador_completo._padronizar_todos_dados()
        
        if not analisador_completo.dados_abas:
            print("‚ùå Nenhum dado v√°lido encontrado nas abas!")
            print("üí° Verifique se sua planilha tem as abas:")
            print("   - D+1 (dados de atendimento)")
            print("   - D+30 (dados de produto)")  
            print("   - NPS Ruim (casos cr√≠ticos)")
            return False
        
        # Converte dados para formato compat√≠vel
        adaptador = AdaptadorDados()
        dados_segmentados = adaptador.converter_para_formato_antigo(analisador_completo.dados_abas)
        
        if not dados_segmentados or dados_segmentados.get('todos') is None or (hasattr(dados_segmentados.get('todos'), 'empty') and dados_segmentados['todos'].empty) or len(dados_segmentados.get('todos', [])) == 0:
            print("‚ùå Erro na convers√£o dos dados!")
            return False
        
        # Mostra resumo da extra√ß√£o
        print(f"\n‚úÖ DADOS EXTRA√çDOS COM SUCESSO:")
        total_registros = len(dados_segmentados['todos'])
        print(f"üìä Total de registros: {total_registros}")
        
        for tipo in ['atendimento', 'produto', 'nps_ruim']:
            if dados_segmentados.get(tipo) is not None:
                count = len(dados_segmentados[tipo])
                tipo_nome = {
                    'atendimento': 'D+1 (Atendimento)',
                    'produto': 'D+30 (Produto)', 
                    'nps_ruim': 'NPS Ruim'
                }[tipo]
                print(f"   ‚Ä¢ {tipo_nome}: {count} registros")
            else:
                tipo_nome = {
                    'atendimento': 'D+1 (Atendimento)',
                    'produto': 'D+30 (Produto)',
                    'nps_ruim': 'NPS Ruim'
                }[tipo]
                print(f"   ‚ö†Ô∏è {tipo_nome}: N√£o encontrado")
        
        # Mostra amostra dos dados
        print(f"\nüìã AMOSTRA DOS DADOS:")
        todos_df = dados_segmentados.get('todos')
        if todos_df is not None and not todos_df.empty:
            colunas_principais = [col for col in todos_df.columns 
                                if col in ['Data', 'Nome Completo', 'Vendedor', 'Loja', 'Avalia√ß√£o', 'Tipo_Aba']]
            if colunas_principais:
                print(todos_df[colunas_principais].head(3).to_string())
        
        # 3. AN√ÅLISE CUSTOMIZADA COM IA
        print(f"\nü§ñ PASSO 2: An√°lise inteligente especializada...")
        print("üß† Processando dados com foco em Mercad√£o dos √ìculos...")
        
        try:
            # Cria analisador customizado
            analisador_ia = AnalisadorIACustomizado(dados_segmentados, nome_loja)
            relatorio_ia = analisador_ia.gerar_analise_completa()
            
            if relatorio_ia:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                
                # Salva vers√£o TXT
                nome_arquivo_txt = f"relatorio_pos_venda_{nome_loja.replace(' ', '_')}_{timestamp}.txt"
                with open(nome_arquivo_txt, 'w', encoding='utf-8') as f:
                    f.write(relatorio_ia)
                print(f"‚úÖ Relat√≥rio TXT salvo: {nome_arquivo_txt}")
                
                # 4. GERA PDF CUSTOMIZADO
                print(f"\nüìÑ PASSO 3: Gerando PDF estilo Mercad√£o dos √ìculos...")
                
                gerador_pdf = GeradorPDFCustomizado()
                nome_arquivo_pdf = f"relatorio_pos_venda_{nome_loja.replace(' ', '_')}_{timestamp}.pdf"
                pdf_gerado = gerador_pdf.gerar_pdf_customizado(relatorio_ia, nome_loja, nome_arquivo_pdf)
                
                if pdf_gerado:
                    print(f"‚úÖ PDF customizado gerado: {pdf_gerado}")
                else:
                    print("‚ö†Ô∏è Erro ao gerar PDF, mas relat√≥rio TXT dispon√≠vel")
                
                # 5. EXIBE PR√âVIA E RESUMO
                print(f"\nüìÑ PR√âVIA DO RELAT√ìRIO:")
                print("="*65)
                # Mostra primeiras linhas do relat√≥rio
                linhas_preview = relatorio_ia.split('\n')[:15]
                for linha in linhas_preview:
                    if linha.strip():
                        print(linha)
                if len(relatorio_ia.split('\n')) > 15:
                    print("...")
                print("="*65)
                
                # Resumo final
                print(f"\nüéâ RELAT√ìRIO CONCLU√çDO - {nome_loja}")
                print(f"üìä {total_registros} registros analisados")
                
                # Mostra distribui√ß√£o por aba
                todos_df = dados_segmentados.get('todos')
                if todos_df is not None and not todos_df.empty and 'Tipo_Aba' in todos_df.columns:
                    resumo_tipos = todos_df['Tipo_Aba'].value_counts()
                    print(f"üìã Distribui√ß√£o:")
                    for tipo, count in resumo_tipos.items():
                        tipo_nome = {
                            'atendimento': 'Atendimento (D+1)',
                            'produto': 'Produto (D+30)',
                            'nps_ruim': 'NPS Ruim'
                        }.get(tipo, tipo)
                        print(f"   ‚Ä¢ {tipo_nome}: {count}")
                
                print(f"‚úÖ An√°lise especializada Mercad√£o dos √ìculos completa!")
                
            else:
                print("‚ö†Ô∏è Erro na gera√ß√£o da an√°lise IA")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise IA: {str(e)}")
            print("üí° Verifique a configura√ß√£o da API OpenAI")
        
        return True
            
    except KeyboardInterrupt:
        print("\n\nüëã Opera√ß√£o cancelada pelo usu√°rio")
        return False
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
        return False


def testar_extracao_abas():
    """Testa extra√ß√£o das abas espec√≠ficas"""
    print("\nüîç TESTE DE EXTRA√á√ÉO DAS ABAS ESPEC√çFICAS")
    print("=" * 60)
    
    url = input("URL da planilha para teste: ").strip()
    
    if not url:
        print("‚ùå URL n√£o fornecida!")
        return
    
    try:
        print("üîç Testando extra√ß√£o...")
        extractor = NPSExtractorCustomizado()
        
        if extractor.conectar_sheets(url):
            dados = extractor.extrair_dados_segmentados()
            
            if dados and dados.get('todos') is not None and len(dados.get('todos', [])) > 0:
                print(f"\n‚úÖ TESTE CONCLU√çDO:")
                
                for tipo, df in dados.items():
                    if df is not None and tipo != 'todos' and len(df) > 0:
                        print(f"\nüìä {tipo.upper()}:")
                        print(f"   ‚Ä¢ Registros: {len(df)}")
                        print(f"   ‚Ä¢ Colunas: {list(df.columns)}")
                        
                        # Mostra amostra
                        if len(df) > 0:
                            print("   ‚Ä¢ Amostra:")
                            print(df.head(2).to_string())
                
                print(f"\nüéØ RESUMO GERAL:")
                print(f"   ‚Ä¢ Total combinado: {len(dados['todos'])} registros")
                print(f"   ‚Ä¢ Abas encontradas: {dados['todos']['Aba_Origem'].nunique()} abas")
                
            else:
                print("‚ùå Nenhum dado extra√≠do")
        else:
            print("‚ùå Falha na conex√£o")
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
    
    input("\nPressione Enter para voltar ao menu...")


def configurar_autenticacao_customizada():
    """Menu de configura√ß√£o simplificado"""
    print("\nüîê CONFIGURA√á√ÉO DE AUTENTICA√á√ÉO")
    print("=" * 50)
    print("üí° Para acessar planilhas privadas, configure:")
    print()
    print("1. üîë OAuth2 (Recomendado)")
    print("2. üîê Service Account")  
    print("3. üìä Verificar Status")
    print("4. üîô Voltar")
    print()
    
    opcao = input("Escolha uma op√ß√£o (1-4): ").strip()
    
    if opcao == '1':
        print("\nüîë CONFIGURA√á√ÉO OAUTH2:")
        print("Execute: python oauth2_working.py")
        print("Siga as instru√ß√µes para autorizar o acesso")
    elif opcao == '2':
        print("\nüîê CONFIGURA√á√ÉO SERVICE ACCOUNT:")
        print("1. V√° ao Google Cloud Console")
        print("2. Crie um Service Account")
        print("3. Baixe o arquivo JSON")
        print("4. Salve como: credentials/service-account.json")
    elif opcao == '3':
        # Verifica status
        print("\nüìä STATUS DA AUTENTICA√á√ÉO:")
        if os.path.exists('credentials/oauth2_token_working.json'):
            print("‚úÖ OAuth2: Configurado")
        else:
            print("‚ùå OAuth2: N√£o configurado")
            
        if os.path.exists('credentials/service-account.json'):
            print("‚úÖ Service Account: Configurado")
        else:
            print("‚ùå Service Account: N√£o configurado")
            
        print("üåê M√©todo P√∫blico: Sempre dispon√≠vel")
    
    input("\nPressione Enter para continuar...")


def main():
    """Interface principal do sistema customizado"""
    print("üéØ SISTEMA AN√ÅLISE MERCAD√ÉO DOS √ìCULOS")
    print("Especializado em D+1, D+30 e NPS Ruim")
    print("Autor: Claude Code | Data: 2025")
    
    while True:
        try:
            exibir_menu_customizado()
            
            opcao = input("\nEscolha uma op√ß√£o (1-5): ").strip()
            
            if opcao == '1':
                processar_relatorio_customizado()
                input("\nPressione Enter para voltar ao menu...")
            elif opcao == '2':
                testar_extracao_abas()
            elif opcao == '3':
                mostrar_instrucoes_customizadas()
            elif opcao == '4':
                configurar_autenticacao_customizada()
            elif opcao == '5':
                print("\nüëã Saindo do sistema...")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida! Escolha 1, 2, 3, 4 ou 5.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saindo do sistema...")
            break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {str(e)}")
            try:
                input("Pressione Enter para continuar...")
            except EOFError:
                print("\nüëã Saindo do sistema...")
                break


if __name__ == "__main__":
    main()