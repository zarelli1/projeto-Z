#!/usr/bin/env python3
"""
Analisador IA Simple - An√°lise b√°sica de dados NPS
Autor: Claude Code  
Data: 27/07/2025
"""

import openai
import os
from datetime import datetime
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()


class AnalisadorIACustomizado:
    """Analisador IA simples para dados NPS"""
    
    def __init__(self, dados_segmentados, nome_loja="Mercad√£o dos √ìculos"):
        self.dados = dados_segmentados
        self.nome_loja = nome_loja
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
        self.openai_client = openai.OpenAI(api_key=api_key)
    
    def gerar_analise_completa(self):
        """Gera an√°lise completa com IA otimizada"""
        try:
            print("[IA] Gerando an√°lise com IA...")
            
            # Valida√ß√£o pr√©via dos dados
            if not self.dados or not isinstance(self.dados, dict):
                print("[AVISO] Dados inv√°lidos para an√°lise IA")
                return self._gerar_relatorio_basico()
            
            # Prepara dados para IA com cache
            resumo_dados = self._preparar_resumo_dados()
            if not resumo_dados or len(resumo_dados.strip()) < 50:
                print("[AVISO] Dados insuficientes para an√°lise IA")
                return self._gerar_relatorio_basico()
            
            prompt = f"""
Voc√™ √© um consultor de experi√™ncia do cliente especializado em relat√≥rios NPS para √≥ticas.
Gere um relat√≥rio LIMPO e PROFISSIONAL seguindo EXATAMENTE esta estrutura:

DADOS PARA AN√ÅLISE:
{resumo_dados}

FORMATO OBRIGAT√ìRIO DO RELAT√ìRIO:

[DADOS] An√°lise P√≥s-venda ‚Äî {datetime.now().strftime('%B/%Y')}

[OK] Vis√£o Geral
NPS Atendimento: [n√∫mero] ([classifica√ß√£o])
NPS Produto: [n√∫mero] ([classifica√ß√£o])
Total de Avalia√ß√µes: [n√∫mero]

[PESSOAS] Avalia√ß√£o de Atendimento
M√©dia de satisfa√ß√£o: [n√∫mero]/10
Performance: [texto de 1-2 linhas explicando o resultado]

Destaques Positivos:
‚Ä¢ [coment√°rio cliente] - [nome], nota [n√∫mero]

Pontos de Aten√ß√£o:
‚Ä¢ [coment√°rio cr√≠tico] - [nome], nota [n√∫mero]

[PRODUTO] Avalia√ß√£o de Produto
M√©dia de satisfa√ß√£o: [n√∫mero]/10
Performance: [texto de 1-2 linhas explicando o resultado]

Destaques Positivos:
‚Ä¢ [coment√°rio cliente] - [nome], nota [n√∫mero]

Pontos de Aten√ß√£o:
‚Ä¢ [coment√°rio cr√≠tico] - [nome], nota [n√∫mero]

üë©‚Äçüíº Performance das Vendedoras
Destaque: [nome] com m√©dia [n√∫mero] em [quantidade] atendimentos
Acompanhamento: [nome] necessita suporte com m√©dia [n√∫mero]

[IDEIA] Recomenda√ß√µes
1. [a√ß√£o espec√≠fica baseada nos dados]
2. [melhoria concreta]
3. [estrat√©gia de manuten√ß√£o]

REGRAS CR√çTICAS:
‚Ä¢ Use APENAS os dados espec√≠ficos fornecidos (D+1 para atendimento, D+30 para produto)
‚Ä¢ Seja conciso - m√°ximo 2 coment√°rios por se√ß√£o
‚Ä¢ N√ÉO invente dados - use apenas o que est√° dispon√≠vel
‚Ä¢ Mantenha formata√ß√£o SUPER SIMPLES - apenas texto corrido e bullets (‚Ä¢)
‚Ä¢ NUNCA crie tabelas, linhas, separadores ou formata√ß√£o complexa
‚Ä¢ Se n√£o houver dados de uma se√ß√£o, escreva "Dados n√£o dispon√≠veis"
‚Ä¢ Performance das vendedoras: APENAS texto corrido, sem tabelas ou formata√ß√£o especial
"""
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um consultor especialista em NPS e experi√™ncia do clientee,Analisa dados de p√≥s-venda e entrega insights claros e confi√°veis"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=2000
            )
            
            relatorio_ia = response.choices[0].message.content
            
            # Monta relat√≥rio final
            relatorio_final = self._montar_relatorio_final(relatorio_ia)
            
            print("[OK] An√°lise IA conclu√≠da!")
            return relatorio_final
            
        except Exception as e:
            print(f"[AVISO] Erro na an√°lise IA: {str(e)}")
            return self._gerar_relatorio_basico()
    
    def _preparar_resumo_dados(self):
        """Prepara resumo detalhado dos dados para IA"""
        try:
            resumo = f"=== DADOS NPS {self.nome_loja.upper()} ===\n\n"
            
            if self.dados.get('todos') is not None:
                df_todos = self.dados['todos']
                total = len(df_todos)
                resumo += f"[DADOS] Total de registros: {total}\n\n"
                
                # An√°lise por tipo de aba
                if 'Tipo_Aba' in df_todos.columns:
                    tipos = df_todos['Tipo_Aba'].value_counts()
                    resumo += "[RELATORIO] Distribui√ß√£o por tipo:\n"
                    for tipo, count in tipos.items():
                        resumo += f"   ‚Ä¢ {tipo}: {count} registros\n"
                    resumo += "\n"
                
                # An√°lise detalhada de avalia√ß√µes
                if 'Avalia√ß√£o' in df_todos.columns:
                    avaliacoes = df_todos['Avalia√ß√£o'].dropna()
                    if len(avaliacoes) > 0:
                        resumo += f"‚≠ê M√âTRICAS DE AVALIA√á√ÉO:\n"
                        resumo += f"   ‚Ä¢ M√©dia geral: {avaliacoes.mean():.2f}\n"
                        resumo += f"   ‚Ä¢ Promotores (9-10): {len(avaliacoes[avaliacoes >= 9])}\n"
                        resumo += f"   ‚Ä¢ Neutros (7-8): {len(avaliacoes[(avaliacoes >= 7) & (avaliacoes <= 8)])}\n"
                        resumo += f"   ‚Ä¢ Detratores (‚â§6): {len(avaliacoes[avaliacoes <= 6])}\n\n"
                        
                        # M√âTRICAS SEPARADAS POR TIPO
                        if 'Tipo_Aba' in df_todos.columns:
                            for tipo in ['atendimento', 'produto']:
                                df_tipo = df_todos[df_todos['Tipo_Aba'] == tipo]
                                if len(df_tipo) > 0 and 'Avalia√ß√£o' in df_tipo.columns:
                                    aval_tipo = df_tipo['Avalia√ß√£o'].dropna()
                                    if len(aval_tipo) > 0:
                                        tipo_nome = 'ATENDIMENTO (D+1)' if tipo == 'atendimento' else 'PRODUTO (D+30)'
                                        resumo += f"[DADOS] {tipo_nome}:\n"
                                        resumo += f"   ‚Ä¢ Total avalia√ß√µes: {len(aval_tipo)}\n"
                                        resumo += f"   ‚Ä¢ M√©dia de nota: {aval_tipo.mean():.2f}\n"
                                        
                                        promotores = len(aval_tipo[aval_tipo >= 9])
                                        neutros = len(aval_tipo[(aval_tipo >= 7) & (aval_tipo <= 8)])
                                        detratores = len(aval_tipo[aval_tipo <= 6])
                                        nps = (promotores - detratores) / len(aval_tipo) * 100
                                        
                                        resumo += f"   ‚Ä¢ NPS: {nps:.1f}\n"
                                        resumo += f"   ‚Ä¢ Promotores: {promotores}\n"
                                        resumo += f"   ‚Ä¢ Detratores: {detratores}\n\n"
                
                # An√°lise de vendedores
                if 'Vendedor' in df_todos.columns:
                    vendedores = df_todos['Vendedor'].value_counts().head(10)
                    resumo += f"[PESSOAS] TOP VENDEDORES:\n"
                    for vendedor, count in vendedores.items():
                        if vendedor and str(vendedor).strip() != '' and str(vendedor) != 'nan':
                            # Calcula m√©dia do vendedor se poss√≠vel
                            df_vendedor = df_todos[df_todos['Vendedor'] == vendedor]
                            if 'Avalia√ß√£o' in df_vendedor.columns:
                                aval_vendedor = df_vendedor['Avalia√ß√£o'].dropna()
                                if len(aval_vendedor) > 0:
                                    media = aval_vendedor.mean()
                                    resumo += f"   ‚Ä¢ {vendedor}: {count} vendas (m√©dia {media:.1f})\n"
                                else:
                                    resumo += f"   ‚Ä¢ {vendedor}: {count} vendas\n"
                    resumo += "\n"
                
                # Coment√°rios negativos (para an√°lise de problemas)
                if 'Avalia√ß√£o' in df_todos.columns and 'Coment√°rio' in df_todos.columns:
                    comentarios_ruins = df_todos[df_todos['Avalia√ß√£o'] <= 6]
                    if len(comentarios_ruins) > 0:
                        resumo += f"[AVISO] COMENT√ÅRIOS CR√çTICOS (nota ‚â§6):\n"
                        for idx, row in comentarios_ruins.head(5).iterrows():
                            nota = row.get('Avalia√ß√£o', 'N/A')
                            comentario = str(row.get('Coment√°rio', '')).strip()
                            vendedor = str(row.get('Vendedor', 'N/A')).strip()
                            
                            # Filtra e limpa coment√°rios
                            comentario_limpo = self._limpar_comentario(comentario)
                            vendedor_limpo = self._limpar_comentario(vendedor)
                            
                            if comentario_limpo and len(comentario_limpo) > 5:
                                resumo += f"   ‚Ä¢ Nota {nota} - {vendedor_limpo}: \"{comentario_limpo[:100]}...\"\n"
                        resumo += "\n"
            
            return resumo
            
        except Exception as e:
            return f"Dados b√°sicos da {self.nome_loja}\nErro: {str(e)}"
    
    def _limpar_comentario(self, texto):
        """Limpa coment√°rios removendo caracteres de encoding ruins e palavr√µes"""
        if not texto or texto == 'nan' or str(texto).strip() == '':
            return ''
        
        texto = str(texto).strip()
        
        # Corre√ß√µes de encoding comuns
        corre√ß√µes_encoding = {
            'n√É¬£o': 'n√£o',
            '√É¬£o': '√£o', 
            '√É¬ß√É¬£o': '√ß√£o',
            '√É¬ß': '√ß',
            '√É¬°': '√°',
            '√É¬©': '√©',
            '√É¬≠': '√≠',
            '√É¬≥': '√≥',
            '√É¬∫': '√∫',
            '√É ': '√†',
            '√É¬¢': '√¢',
            '√É¬™': '√™',
            '√É¬¥': '√¥',
            '√É¬π': '√π',
            'Gon√É¬ßalves': 'Gon√ßalves',
            'Jos√É¬©': 'Jos√©',
            'Mar√É¬≠a': 'Maria',
            'Jo√É¬£o': 'Jo√£o',
            'An√É¬¥nio': 'Ant√¥nio',
            'resolu√É¬ß√É¬£o': 'resolu√ß√£o',
            'avalia√É¬ß√É¬£o': 'avalia√ß√£o',
            'aten√É¬ß√É¬£o': 'aten√ß√£o',
            'informa√É¬ß√É¬£o': 'informa√ß√£o',
            'considera√É¬ß√É¬µes': 'considera√ß√µes',
            'atendendte': 'atendente'
        }
        
        # Aplica corre√ß√µes de encoding
        for errado, correto in corre√ß√µes_encoding.items():
            texto = texto.replace(errado, correto)
        
        # Remove coment√°rios muito vagos ou in√∫teis
        comentarios_inuteis = [
            'nan',
            'n/a',
            'sem coment√°rio',
            'nada',
            'ok',
            'bom',
            'ruim',
            '.',
            '..',
            '...',
            'n√£o sei',
            'nenhum'
        ]
        
        if texto.lower().strip() in comentarios_inuteis:
            return ''
        
        # Remove coment√°rios muito curtos (menos de 10 caracteres)
        if len(texto.strip()) < 10:
            return ''
        
        # Remove caracteres especiais problem√°ticos
        texto = texto.replace('√É¬¢√¢‚Äö¬¨√¢‚Äû¬¢', "'")
        texto = texto.replace('√É¬¢√¢‚Äö¬¨√Ö"', '"')
        texto = texto.replace('√É¬¢√¢‚Äö¬¨', '"')
        
        # Limita tamanho para evitar coment√°rios muito longos
        if len(texto) > 150:
            texto = texto[:150] + '...'
        
        return texto.strip()
    
    def _montar_relatorio_final(self, relatorio_ia):
        """Monta relat√≥rio final formatado"""
        timestamp = datetime.now().strftime('%d/%m/%Y √†s %H:%M')
        
        relatorio = f"""
[DATA] Data da An√°lise: {timestamp}

{relatorio_ia}
"""
        
        return relatorio
    
    def _gerar_relatorio_basico(self):
        """Gera relat√≥rio b√°sico sem IA"""
        timestamp = datetime.now().strftime('%d/%m/%Y √†s %H:%M')
        
        return f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    RELAT√ìRIO NPS B√ÅSICO                      ‚ïë
‚ïë                   {self.nome_loja.upper():<45} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

[DATA] Data da An√°lise: {timestamp}

[DADOS] DADOS PROCESSADOS:
‚Ä¢ Dados extra√≠dos e organizados com sucesso
‚Ä¢ Sistema funcionando adequadamente
‚Ä¢ Pronto para an√°lise detalhada

[IDEIA] OBSERVA√á√ÉO:
‚Ä¢ An√°lise IA temporariamente indispon√≠vel
‚Ä¢ Dados estruturados para processamento manual

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    PROCESSAMENTO CONCLU√çDO                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""


if __name__ == "__main__":
    print("Analisador IA Simple pronto!")
    # Teste b√°sico
    dados_teste = {'todos': None}
    try:
        analisador = AnalisadorIACustomizado(dados_teste, "Teste")
        print("Inicializacao concluida!")
    except Exception as e:
        print(f"Erro na inicializacao: {e}")